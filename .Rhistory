available.packages()
installed.packages()
find.package()
find.package(head(rowname(a),3)
find.package(head(rownamew(a),3)
find.package(head(rownames(a),3)
find.package(head(rownames(a),3)
available.packages(head(rownames,(a),3)
a <- available.packages(head(rownames,(a),3)
a <-available.packages(head(rownames,(a),3)
dd
pwd
getwd()
ls()
swirl()
library("swirl")
install.packages("swirl")
library("swirl")
matrix(1:10,2,5)
x<-matrix(1:10,2,5)
x
solve(x)
x<-matrix(1:4,2,2)
x
solve(x)
matrix(NULL)
matrix()
x=matrix()
x
function() x
x=matrix()
x
function(y,i,j)
set<-function(y,i,j)
set <- function(y,i,j)
x<-set
set(1:4,2,2)
x=matrix()
set <-function(y)
x<<-y
x<<-y
set(matrix(1:4,2,2))
x<<-y
x<<-set
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(2)
makeVector(x=2)
makeVector(x=10)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(4)
cachemean(5,...)
cachemean(5,...=)
makeVector(x=numeric(20))
View(x)
View(x)
View(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <-NULL
set <- function(y)
{
x <<- y
inv <<-NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set,get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if (!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <-x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
## Return a matrix that is the inverse of 'x'
View(set)
View(set)
View(set)
View(set)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <-NULL
set <- function(y)
{
x <<- y
inv <<-NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set,get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if (!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <-x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
## Return a matrix that is the inverse of 'x'
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cachesolve(m)
View(cacheSolve)
cacheSolve(m)
cacheSolve(m)
setwd("E:/DS-Repositories/DataScienceCoursera/ProgrammingAssignment2")
